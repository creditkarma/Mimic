{
  "name": "tutorial",
  "enums": [
    {
      "name": "Operation",
      "doc": "You can define enums, which are just 32 bit integers. Values are optional and start at 1 if not supplied, C style again.",
      "members": [
        {
          "name": "ADD",
          "value": 1
        },
        {
          "name": "SUBTRACT",
          "value": 2
        },
        {
          "name": "MULTIPLY",
          "value": 3
        },
        {
          "name": "DIVIDE",
          "value": 4
        }
      ]
    }
  ],
  "typedefs": [
    {
      "name": "MyInteger",
      "doc": "Thrift lets you do typedefs to get pretty names for your types. Standard C style here.",
      "typeId": "i32"
    }
  ],
  "structs": [
    {
      "name": "InvalidOperation",
      "isException": true,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "whatOp",
          "typeId": "i32",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "why",
          "typeId": "string",
          "required": "req_out"
        }
      ],
      "doc": "Structs can also be exceptions, if they are nasty."
    },
    {
      "name": "SharedStruct",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "key",
          "typeId": "i32",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "value",
          "typeId": "string",
          "required": "req_out"
        }
      ]
    },
    {
      "name": "Work",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "num1",
          "typeId": "i32",
          "required": "req_out",
          "default": 0
        },
        {
          "key": 2,
          "name": "num2",
          "typeId": "i32",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "op",
          "typeId": "i32",
          "extra": {
            "typeId": "enum",
            "class": "Operation"
          },
          "required": "req_out"
        },
        {
          "key": 4,
          "name": "comment",
          "typeId": "string",
          "required": "optional"
        }
      ],
      "doc": "Structs are the basic complex data structures. They are comprised of fields which each have an integer identifier, a type, a symbolic name, and an optional default value.* Fields can be declared \"optional\", which ensures they will not be included in the serialized output if they aren't set.  Note that this requires some manual management in some languages."
    }
  ],
  "constants": [
    {
      "name": "INT32CONSTANT",
      "doc": "Thrift also lets you define constants for use across languages. Complex types and structs are specified using JSON notation.",
      "value": 9853,
      "typeId": "i32"
    },
    {
      "name": "MAPCONSTANT",
      "value": {
        "hello": "world",
        "goodnight": "moon"
      },
      "typeId": "map",
      "type": {
        "typeId": "map",
        "keyTypeId": "string",
        "valueTypeId": "string"
      }
    }
  ],
  "services": [
    {
      "name": "SharedService",
      "functions": [
        {
          "name": "getStruct",
          "returnTypeId": "struct",
          "returnType": {
            "typeId": "struct",
            "class": "SharedStruct"
          },
          "oneway": false,
          "arguments": [
            {
              "key": 1,
              "name": "key",
              "typeId": "i32",
              "required": "req_out"
            }
          ],
          "exceptions": []
        }
      ]
    },
    {
      "name": "Calculator",
      "extends": "SharedService",
      "doc": "Ahh, now onto the cool part, defining a service. Services just need a name and can optionally inherit from another service using the extends keyword.",
      "functions": [
        {
          "name": "add",
          "returnTypeId": "i32",
          "oneway": false,
          "arguments": [
            {
              "key": 1,
              "name": "num1",
              "typeId": "i32",
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "num2",
              "typeId": "i32",
              "required": "req_out"
            }
          ],
          "exceptions": []
        },
        {
          "name": "calculate",
          "returnTypeId": "i32",
          "oneway": false,
          "arguments": [
            {
              "key": 1,
              "name": "logid",
              "typeId": "i32",
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "w",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "Work"
              },
              "required": "req_out"
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ouch",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidOperation"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "ping",
          "returnTypeId": "void",
          "oneway": false,
          "doc": "A method definition looks like C code. It has a return type, arguments, and optionally a list of exceptions that it may throw. Note that argument lists and exception lists are specified using the exact same syntax as field lists in struct or exception definitions.",
          "arguments": [],
          "exceptions": []
        },
        {
          "name": "zip",
          "returnTypeId": "void",
          "oneway": true,
          "doc": "This method has a oneway modifier. That means the client only makes a request and does not listen for any response at all. Oneway methods must be void.",
          "arguments": [],
          "exceptions": []
        }
      ]
    }
  ]
}